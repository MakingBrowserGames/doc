#!/usr/bin/env bash

#defaults
SCRIPT_ROOT=$(cd -P $(dirname "$0") && cd .. && pwd)
DOC_ROOT="$SCRIPT_ROOT/doc"
OUT_ROOT="$SCRIPT_ROOT/build"
REMOTE_USER=$(whoami)
REMOTE_PATH="doc.gameclosure.com:/srv/www/docs.gameclosure.com/public_html/"
CONF_ROOT="$SCRIPT_ROOT/conf"
INCLUDE_ROOT="$CONF_ROOT/include"


function print_help {
		echo "Usage: $(basename $0) [options]"
		echo " -D       Deploy to remote."
		echo " -U=name  Set the remote user name; use with -D. Default: $REMOTE_USER"
		echo " -R=path  Set the remote path; use with -D. Default: $REMOTE_PATH"
		echo " -i=dir   Input directory. Default $DOC_ROOT"
		echo " -o=dir   Output directory. Default: $OUT_ROOT"
		echo " -h       Print this help."
}

# markdown to html, add doc_root to output file
function convert_file {
		local in_file="$1" out_file="$OUT_ROOT/$2.html" 

		## Covert markdown to html using our template
		if pandoc -f markdown -t html5 --smart \
				--standalone --template "$CONF_ROOT/template.html.tmp" \
				--output "$out_file" "$in_file"; then
				echo "  Generated $out_file"
		else
				echo "Error generating from $in_file"
				exit 1
		fi
}

# output file name is the complete namespace, determined by directory
function convert_directory {
		while read path; do
				#remove doc_root and beginning slash
				local ns="${path##$DOC_ROOT}"
				ns="${ns#/}"
				#create namespace file name: name-space-file
				ns=$(basename $(echo "$ns" | tr '/' '-') '.md')
				
				convert_file "$path" "$ns"
				
		done < <(find "$DOC_ROOT" -type f -name '*.md' | grep -v -i 'readme')
}

while getopts "DR:i:o:h" opt; do
    case $opt in
				D) DEPLOY_FLAG=1;;
				U) REMOTE_USER="$OPTARG";;
				R) REMOTE_PATH="$OPTARG";;
				i) DOC_ROOT="$OPTARG";;
				o) OUT_ROOT="$OPTARG";;
				h) print_help; exit 0;;
        \?) print_help; exit 0;;
    esac
done

# Check some stuff ...

if ! which pandoc > /dev/null; then
		echo "Error: Requires pandoc to build."
		exit 1
fi

if ! which m4 > /dev/null; then
		echo "Error: Requires m4 to build."
		exit 1
fi

if [ ! -d "$DOC_ROOT" ]; then
		echo "Error: Document directory is not valid."
		exit 1
fi

if [ ! -d "$OUT_ROOT" ]; then
		mkdir -p "$OUT_ROOT"
fi

# And off we go ...

echo "  Copying include files ..."
cp -r "$INCLUDE_ROOT" "$OUT_ROOT"

## Add sidebar navigation to template file
m4 -P -D sidebar_nav="$CONF_ROOT/sidebar-nav.html" \
		"$CONF_ROOT/template.html" > "$CONF_ROOT/template.html.tmp"

## Convert files from markdown to html and output ...
convert_directory

## Sync with remote ...
if [ -n "$DEPLOY_FLAG" ]; then
		if ! which rsync > /dev/null; then
				echo "Error: Unable to locate rsync, no remote deployment."
		else
				#requires traling slash
				echo "Syncing with remote directory ..."
				rsync -rzvh --omit-dir-times --archive --delete "$OUT_ROOT/" "$REMOTE_USER@$REMOTE_PATH"
		fi
fi

## Cleanup ...
if [ -f "$CONF_ROOT/template.html.tmp" ]; then
		rm "$CONF_ROOT/template.html.tmp"
fi
