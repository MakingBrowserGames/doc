#!/usr/bin/env bash

function print_help {
		echo "Usage: $(basename $0) [options]"
		echo " -d=dir   Set the output directory."
#		echo " -i=file  Input Markdown source file."
#		echo " -o=file  Output HTML file."
		echo " -h       Print this help."
}

ROOT_DIR=$(cd -P $(dirname "$0") && cd .. && pwd)
OUTPUT_DIR="$ROOT_DIR/output"
MD_ROOT=$(cd "$ROOT_DIR/../iceberg-api" && pwd)

declare -a FILES=(
		"gc/application.md"
		"timestep/device.md"
		"timestep/view.md"
		"timestep/imageview.md"
		"timestep/textview.md"
		"timestep/scrollview.md"
		"timestep/ui/list.md"
		"lib/pubsub.md"
)

#associate a src path with a namespace (used for the html file name)
declare -A PATHS

function determine_file_paths {
		for file in "${FILES[@]}"; do
				if [ ! -f "$MD_ROOT/$file" ]; then
						echo "Error: $MD_ROOT/$file is not a valid file."
						exit 1
				fi

				local ns=$(basename $(echo "$file" | tr '/' '-') '.md')
				PATHS["$ns"]="$MD_ROOT/$file"
		done
}

function convert_to_markdown {
		local out_file="$OUT_DIR/$1.html" src_file="$2"

		## Covert markdown to html using our template
		if pandoc -f markdown -t html5 --smart \
				--standalone --template "$ROOT_DIR/templates/tmpl.tmp" \
				--output "$out_file" "$src_file"; then
				echo "  Generated $out_file"
		else
				echo "Error generating from $src_file"
				exit 1
		fi
}

# Parse command-line args ...
if [ "$#" -eq 0 ]; then
		print_help
		exit 1
fi

while getopts "d:i:o:h" opt; do
    case $opt in
				d) OUT_DIR="$OPTARG";;
				i) SRC_FILE="$OPTARG";;
				o) OUT_FILE="$OPTARG";;
				h) print_help; exit 0;;
        \?) print_help; exit 0;;
    esac
done

# Check some params ...

if ! which pandoc > /dev/null; then
		echo "Error: Requires pandoc to build."
		exit 1
fi

if ! which m4 > /dev/null; then
		echo "Error: Requires m4 to build."
		exit 1
fi

if [ ! -d "$OUTPUT_DIR" ]; then
		echo "Error: Output directory is not valid."
		exit 1
fi

# Off we go ...

determine_file_paths

## Add sidebar navigation to template file
m4 -P -D sidebar_nav="$ROOT_DIR/templates/sidebar-nav.html" \
		"$ROOT_DIR/templates/tmpl.html" > "$ROOT_DIR/templates/tmpl.tmp"

for ns in "${!PATHS[@]}"; do
		convert_to_markdown "$ns" "${PATHS[$ns]}"
done

## Cleanup
if [ -f "$ROOT_DIR/templates/tmpl.tmp" ]; then
		rm "$ROOT_DIR/templates/tmpl.tmp"
fi
